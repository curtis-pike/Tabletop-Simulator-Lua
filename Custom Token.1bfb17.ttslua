-- GLOBALS --
local RIGHT_CLICK = "-2"
local BLUE_PLAYER = 1
local RED_PLAYER = 2

local ATTACK_INDEX = 1
local MIN_ATTACK = 1
local MAX_ATTACK = 6

local HIT_INDEX = 2
local MIN_HIT = 2
local MAX_HIT = 6

local NORMAL_DAMAGE_INDEX = 3
local MIN_NORMAL_DAMAGE = 1
local MAX_NORMAL_DAMAGE = 5

local CRIT_DAMAGE_INDEX = 4
local MIN_CRIT_DAMAGE = 1
local MAX_CRIT_DAMAGE = 7

local WOUNDS_INDEX = 5
local MIN_WOUNDS = 0
local MAX_WOUNDS = 21

local NORMALS_INDEX = 6
local MIN_NORMALS = 0
local MAX_NORMALS = 5

local CRITS_INDEX = 7
local MIN_CRITS = 0
local MAX_CRITS = 5

local STATS_TABLE = {"attacks", "hit", "normalDamage", "critDamage", "wounds", "normals", "crits"}
local MIN_TABLE = {MIN_ATTACK, MIN_HIT, MIN_NORMAL_DAMAGE, MIN_CRIT_DAMAGE, MIN_WOUNDS, MIN_NORMALS, MIN_CRITS}
local MAX_TABLE = {MAX_ATTACK, MAX_HIT, MAX_NORMAL_DAMAGE, MAX_CRIT_DAMAGE, MAX_WOUNDS, MAX_NORMALS, MAX_CRITS}

local X_SHIFT = {4,-6}
local Z_SHIFT = {4,4}

local COLOR_TABLE = {"Blue", "Red"}

local ROTATION_TABLE = {
	{-90, 0, 0}, --1
	{0, 0, 0}, --2
	{0, 0, -90}, --3
	{0, 0, 90}, --4
	{0, 0, 180}, --5
	{90, 0, 0}, --6
}

-- END OF GLOBALS --

-- FUNCTIONS --

-- HELPERS --
function checkBoundsX(a, b)
  local a_min = a.getBounds().center.x - a.getBounds().size.x/2
  local a_max = a.getBounds().center.x + a.getBounds().size.x/2
  local b_x = b.getBounds().center.x
  if(a_min < b_x and b_x < a_max) then
    return true
  end
  return false
end

function checkBoundsZ(a, b)
  local a_min = a.getBounds().center.z - a.getBounds().size.z/2
  local a_max = a.getBounds().center.z + a.getBounds().size.z/2
  local b_z = b.getBounds().center.z
  if(a_min < b_z and b_z < a_max) then
    return true
  end
  return false
end

-- takes click type, red/blue, string index from STATS_TABLE, and value
function addValueToStat(player, click, id, stat_index, value)
  -- concat the stat string with the player id (1 or 2)
  local str = STATS_TABLE[stat_index]..tostring(id)
  -- pull the current value
  local curr = self.UI.getValue(str)
  -- if right click, make it subtract instead of add
  if click == RIGHT_CLICK then
    value = -value
  end
  local new = curr + value
  -- set the new value
  self.UI.setValue(str, math.min(MAX_TABLE[stat_index], math.max(new, MIN_TABLE[stat_index])))
end -- addValueToStat()

function modifyAttacks1(player, click)
  addValueToStat(player, click, BLUE_PLAYER, ATTACK_INDEX, 1)
end

function modifyAttacks2(player, click)
  addValueToStat(player, click, RED_PLAYER, ATTACK_INDEX, 1)
end

function modifyHit1(player, click)
  addValueToStat(player, click, BLUE_PLAYER, HIT_INDEX, 1)
end

function modifyHit2(player, click)
  addValueToStat(player, click, RED_PLAYER, HIT_INDEX, 1)
end

function modifyNormalDamage1(player, click)
  addValueToStat(player, click, BLUE_PLAYER, NORMAL_DAMAGE_INDEX, 1)
end

function modifyNormalDamage2(player, click)
  addValueToStat(player, click, RED_PLAYER, NORMAL_DAMAGE_INDEX, 1)
end

function modifyCritDamage1(player, click)
  addValueToStat(player, click, BLUE_PLAYER, CRIT_DAMAGE_INDEX, 1)
end

function modifyCritDamage2(player, click)
  addValueToStat(player, click, RED_PLAYER, CRIT_DAMAGE_INDEX, 1)
end

function modifyWounds1(player, click)
  addValueToStat(player, click, BLUE_PLAYER, WOUNDS_INDEX, 1)
end

function modifyWounds2(player, click)
  addValueToStat(player, click, RED_PLAYER, WOUNDS_INDEX, 1)
end

function modifyNormals1(player, click)
  addValueToStat(player, click, BLUE_PLAYER, NORMALS_INDEX, 1)
end

function modifyNormals2(player, click)
  addValueToStat(player, click, RED_PLAYER, NORMALS_INDEX, 1)
end

function modifyCrits1(player, click)
  addValueToStat(player, click, BLUE_PLAYER, CRITS_INDEX, 1)
end

function modifyCrits2(player, click)
  addValueToStat(player, click, RED_PLAYER, CRITS_INDEX, 1)
end

-- sets the lethal-x values offset X value, keeps Y offset to 0
function modifyLethalX1(player, value)
  self.UI.setValue("lethalx1text", value)
  self.UI.setAttribute("lethalx1text", "offsetXY", (6-value)*16 .. " 0")
end

function modifyLethalX2(player, value)
  self.UI.setValue("lethalx2text", value)
  self.UI.setAttribute("lethalx2text", "offsetXY", (6-value)*16 .. " 0")
end

function test()
  print("test")
  local objects = getAllObjects()
  for index, object in pairs(objects) do
    if object.tag == "Dice" then
      if checkBoundsX(self, object) and checkBoundsZ(self, object) then
        print(object.getValue())
      end
    end
  end
end

function spawnDice1()
  spawnDice(1)
end

function spawnDice2()
  spawnDice(2)
end

-- takes the id (integer) of the player, BLUE_PLAYER (1) or RED_PLAYER (2)
function spawnDice(id)
  local pos=self.getPosition()
  pos.x = pos.x + X_SHIFT[id]
  pos.y = pos.y + 5
  pos.z = pos.z + Z_SHIFT[id]

  local allObjects = getAllObjects()

  for index, object in pairs(allObjects) do
    object.removeFromPlayerSelection(COLOR_TABLE[id])
    if object.tag == "Dice" and object.getColorTint() == Color.fromString(COLOR_TABLE[id])then
      if checkBoundsX(self, object) and checkBoundsZ(self, object) then
        destroyObject(object)
      end
    end
  end

  for i=1,self.UI.getValue("attacks"..tostring(id)) do
    pos.z = pos.z - 1
    if i == 4 then
      pos.z = pos.z + 3
      pos.x = pos.x + 1
    end
    local newDice = spawnObject({type="Die_6", position=pos, rotation=ROTATION_TABLE[1]})
    newDice.setColorTint(COLOR_TABLE[id])
    newDice.addToPlayerSelection(COLOR_TABLE[id])
  end

end

-- END OF BUTTON FUNCTION CALLS --
-- END OF FUNCTIONS